/*!
 * ONNX Runtime Common v1.9.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ort"] = factory();
	else
		root["ort"] = factory();
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/backend-impl.ts":
/*!*****************************!*\
  !*** ./lib/backend-impl.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "registerBackend": function() { return /* binding */ registerBackend; },
/* harmony export */   "resolveBackend": function() { return /* binding */ resolveBackend; }
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var backends = {};
var backendsSortedByPriority = [];
/**
 * Register a backend.
 *
 * @param name - the name as a key to lookup as an execution provider.
 * @param backend - the backend object.
 * @param priority - an integer indicating the priority of the backend. Higher number means higher priority.
 */
var registerBackend = function (name, backend, priority) {
    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {
        var currentBackend = backends[name];
        if (currentBackend === undefined) {
            backends[name] = { backend: backend, priority: priority };
        }
        else if (currentBackend.backend === backend) {
            return;
        }
        else {
            throw new Error("backend \"" + name + "\" is already registered");
        }
        for (var i = 0; i < backendsSortedByPriority.length; i++) {
            if (backends[backendsSortedByPriority[i]].priority <= priority) {
                backendsSortedByPriority.splice(i, 0, name);
                return;
            }
        }
        backendsSortedByPriority.push(name);
        return;
    }
    throw new TypeError('not a valid backend');
};
/**
 * Resolve backend by specified hints.
 *
 * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.
 * @returns a promise that resolves to the backend.
 */
var resolveBackend = function (backendHints) { return __awaiter(void 0, void 0, void 0, function () {
    var backendNames, errors, backendNames_1, backendNames_1_1, backendName, backendInfo, e_1, e_2_1;
    var e_2, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;
                errors = [];
                _b.label = 1;
            case 1:
                _b.trys.push([1, 9, 10, 11]);
                backendNames_1 = __values(backendNames), backendNames_1_1 = backendNames_1.next();
                _b.label = 2;
            case 2:
                if (!!backendNames_1_1.done) return [3 /*break*/, 8];
                backendName = backendNames_1_1.value;
                backendInfo = backends[backendName];
                if (!backendInfo) return [3 /*break*/, 7];
                if (backendInfo.initialized) {
                    return [2 /*return*/, backendInfo.backend];
                }
                else if (backendInfo.initializing) {
                    throw new Error("backend \"" + backendName + "\" is being initialized; cannot initialize multiple times.");
                }
                else if (backendInfo.aborted) {
                    return [3 /*break*/, 7]; // current backend is unavailable; try next
                }
                _b.label = 3;
            case 3:
                _b.trys.push([3, 5, 6, 7]);
                backendInfo.initializing = true;
                return [4 /*yield*/, backendInfo.backend.init()];
            case 4:
                _b.sent();
                backendInfo.initialized = true;
                return [2 /*return*/, backendInfo.backend];
            case 5:
                e_1 = _b.sent();
                errors.push({ name: backendName, err: e_1 });
                backendInfo.aborted = true;
                return [3 /*break*/, 7];
            case 6:
                backendInfo.initializing = false;
                return [7 /*endfinally*/];
            case 7:
                backendNames_1_1 = backendNames_1.next();
                return [3 /*break*/, 2];
            case 8: return [3 /*break*/, 11];
            case 9:
                e_2_1 = _b.sent();
                e_2 = { error: e_2_1 };
                return [3 /*break*/, 11];
            case 10:
                try {
                    if (backendNames_1_1 && !backendNames_1_1.done && (_a = backendNames_1.return)) _a.call(backendNames_1);
                }
                finally { if (e_2) throw e_2.error; }
                return [7 /*endfinally*/];
            case 11: throw new Error("no available backend found. ERR: " + errors.map(function (e) { return "[" + e.name + "] " + e.err; }).join(', '));
        }
    });
}); };


/***/ }),

/***/ "./lib/backend.ts":
/*!************************!*\
  !*** ./lib/backend.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "registerBackend": function() { return /* reexport safe */ _backend_impl__WEBPACK_IMPORTED_MODULE_0__.registerBackend; }
/* harmony export */ });
/* harmony import */ var _backend_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backend-impl */ "./lib/backend-impl.ts");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.



/***/ }),

/***/ "./lib/env-impl.ts":
/*!*************************!*\
  !*** ./lib/env-impl.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EnvImpl": function() { return /* binding */ EnvImpl; }
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var EnvImpl = /** @class */ (function () {
    function EnvImpl() {
        this.wasm = {};
        this.webgl = {};
        this.logLevelInternal = 'warning';
    }
    Object.defineProperty(EnvImpl.prototype, "logLevel", {
        get: function () {
            return this.logLevelInternal;
        },
        // TODO standadize the getter and setter convention in env for other fields.
        set: function (value) {
            if (value === undefined) {
                return;
            }
            if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {
                throw new Error("Unsupported logging level: " + value);
            }
            this.logLevelInternal = value;
        },
        enumerable: false,
        configurable: true
    });
    return EnvImpl;
}());



/***/ }),

/***/ "./lib/env.ts":
/*!********************!*\
  !*** ./lib/env.ts ***!
  \********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "env": function() { return /* binding */ env; }
/* harmony export */ });
/* harmony import */ var _env_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./env-impl */ "./lib/env-impl.ts");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

/**
 * Represent a set of flags as a global singleton.
 */
var env = new _env_impl__WEBPACK_IMPORTED_MODULE_0__.EnvImpl();


/***/ }),

/***/ "./lib/inference-session-impl.ts":
/*!***************************************!*\
  !*** ./lib/inference-session-impl.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InferenceSession": function() { return /* binding */ InferenceSession; }
/* harmony export */ });
/* harmony import */ var _backend_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backend-impl */ "./lib/backend-impl.ts");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tensor */ "./lib/tensor.ts");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};


var InferenceSession = /** @class */ (function () {
    function InferenceSession(handler) {
        this.handler = handler;
    }
    InferenceSession.prototype.run = function (feeds, arg1, arg2) {
        return __awaiter(this, void 0, void 0, function () {
            var fetches, options, isFetchesEmpty, arg1_1, arg1_1_1, name, isFetches, arg1Keys, _a, _b, name, v, _c, _d, name, _e, _f, name, results, returnValue, key;
            var e_1, _g, e_2, _h, e_3, _j, e_4, _k;
            return __generator(this, function (_l) {
                switch (_l.label) {
                    case 0:
                        fetches = {};
                        options = {};
                        // check inputs
                        if (typeof feeds !== 'object' || feeds === null || feeds instanceof _tensor__WEBPACK_IMPORTED_MODULE_1__.Tensor || Array.isArray(feeds)) {
                            throw new TypeError('\'feeds\' must be an object that use input names as keys and OnnxValue as corresponding values.');
                        }
                        isFetchesEmpty = true;
                        // determine which override is being used
                        if (typeof arg1 === 'object') {
                            if (arg1 === null) {
                                throw new TypeError('Unexpected argument[1]: cannot be null.');
                            }
                            if (arg1 instanceof _tensor__WEBPACK_IMPORTED_MODULE_1__.Tensor) {
                                throw new TypeError('\'fetches\' cannot be a Tensor');
                            }
                            if (Array.isArray(arg1)) {
                                if (arg1.length === 0) {
                                    throw new TypeError('\'fetches\' cannot be an empty array.');
                                }
                                isFetchesEmpty = false;
                                try {
                                    // output names
                                    for (arg1_1 = __values(arg1), arg1_1_1 = arg1_1.next(); !arg1_1_1.done; arg1_1_1 = arg1_1.next()) {
                                        name = arg1_1_1.value;
                                        if (typeof name !== 'string') {
                                            throw new TypeError('\'fetches\' must be a string array or an object.');
                                        }
                                        if (this.outputNames.indexOf(name) === -1) {
                                            throw new RangeError("'fetches' contains invalid output name: " + name + ".");
                                        }
                                        fetches[name] = null;
                                    }
                                }
                                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                finally {
                                    try {
                                        if (arg1_1_1 && !arg1_1_1.done && (_g = arg1_1.return)) _g.call(arg1_1);
                                    }
                                    finally { if (e_1) throw e_1.error; }
                                }
                                if (typeof arg2 === 'object' && arg2 !== null) {
                                    options = arg2;
                                }
                                else if (typeof arg2 !== 'undefined') {
                                    throw new TypeError('\'options\' must be an object.');
                                }
                            }
                            else {
                                isFetches = false;
                                arg1Keys = Object.getOwnPropertyNames(arg1);
                                try {
                                    for (_a = __values(this.outputNames), _b = _a.next(); !_b.done; _b = _a.next()) {
                                        name = _b.value;
                                        if (arg1Keys.indexOf(name) !== -1) {
                                            v = arg1[name];
                                            if (v === null || v instanceof _tensor__WEBPACK_IMPORTED_MODULE_1__.Tensor) {
                                                isFetches = true;
                                                isFetchesEmpty = false;
                                                fetches[name] = v;
                                            }
                                        }
                                    }
                                }
                                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                finally {
                                    try {
                                        if (_b && !_b.done && (_h = _a.return)) _h.call(_a);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                }
                                if (isFetches) {
                                    if (typeof arg2 === 'object' && arg2 !== null) {
                                        options = arg2;
                                    }
                                    else if (typeof arg2 !== 'undefined') {
                                        throw new TypeError('\'options\' must be an object.');
                                    }
                                }
                                else {
                                    options = arg1;
                                }
                            }
                        }
                        else if (typeof arg1 !== 'undefined') {
                            throw new TypeError('Unexpected argument[1]: must be \'fetches\' or \'options\'.');
                        }
                        try {
                            // check if all inputs are in feed
                            for (_c = __values(this.inputNames), _d = _c.next(); !_d.done; _d = _c.next()) {
                                name = _d.value;
                                if (typeof feeds[name] === 'undefined') {
                                    throw new Error("input '" + name + "' is missing in 'feeds'.");
                                }
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_j = _c.return)) _j.call(_c);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        // if no fetches is specified, we use the full output names list
                        if (isFetchesEmpty) {
                            try {
                                for (_e = __values(this.outputNames), _f = _e.next(); !_f.done; _f = _e.next()) {
                                    name = _f.value;
                                    fetches[name] = null;
                                }
                            }
                            catch (e_4_1) { e_4 = { error: e_4_1 }; }
                            finally {
                                try {
                                    if (_f && !_f.done && (_k = _e.return)) _k.call(_e);
                                }
                                finally { if (e_4) throw e_4.error; }
                            }
                        }
                        return [4 /*yield*/, this.handler.run(feeds, fetches, options)];
                    case 1:
                        results = _l.sent();
                        returnValue = {};
                        for (key in results) {
                            if (Object.hasOwnProperty.call(results, key)) {
                                returnValue[key] = new _tensor__WEBPACK_IMPORTED_MODULE_1__.Tensor(results[key].type, results[key].data, results[key].dims);
                            }
                        }
                        return [2 /*return*/, returnValue];
                }
            });
        });
    };
    InferenceSession.create = function (arg0, arg1, arg2, arg3) {
        return __awaiter(this, void 0, void 0, function () {
            var filePathOrUint8Array, options, buffer, byteOffset, byteLength, eps, backendHints, backend, handler;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {};
                        if (typeof arg0 === 'string') {
                            filePathOrUint8Array = arg0;
                            if (typeof arg1 === 'object' && arg1 !== null) {
                                options = arg1;
                            }
                            else if (typeof arg1 !== 'undefined') {
                                throw new TypeError('\'options\' must be an object.');
                            }
                        }
                        else if (arg0 instanceof Uint8Array) {
                            filePathOrUint8Array = arg0;
                            if (typeof arg1 === 'object' && arg1 !== null) {
                                options = arg1;
                            }
                            else if (typeof arg1 !== 'undefined') {
                                throw new TypeError('\'options\' must be an object.');
                            }
                        }
                        else if (arg0 instanceof ArrayBuffer ||
                            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {
                            buffer = arg0;
                            byteOffset = 0;
                            byteLength = arg0.byteLength;
                            if (typeof arg1 === 'object' && arg1 !== null) {
                                options = arg1;
                            }
                            else if (typeof arg1 === 'number') {
                                byteOffset = arg1;
                                if (!Number.isSafeInteger(byteOffset)) {
                                    throw new RangeError('\'byteOffset\' must be an integer.');
                                }
                                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {
                                    throw new RangeError("'byteOffset' is out of range [0, " + buffer.byteLength + ").");
                                }
                                byteLength = arg0.byteLength - byteOffset;
                                if (typeof arg2 === 'number') {
                                    byteLength = arg2;
                                    if (!Number.isSafeInteger(byteLength)) {
                                        throw new RangeError('\'byteLength\' must be an integer.');
                                    }
                                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {
                                        throw new RangeError("'byteLength' is out of range (0, " + (buffer.byteLength - byteOffset) + "].");
                                    }
                                    if (typeof arg3 === 'object' && arg3 !== null) {
                                        options = arg3;
                                    }
                                    else if (typeof arg3 !== 'undefined') {
                                        throw new TypeError('\'options\' must be an object.');
                                    }
                                }
                                else if (typeof arg2 !== 'undefined') {
                                    throw new TypeError('\'byteLength\' must be a number.');
                                }
                            }
                            else if (typeof arg1 !== 'undefined') {
                                throw new TypeError('\'options\' must be an object.');
                            }
                            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);
                        }
                        else {
                            throw new TypeError('Unexpected argument[0]: must be \'path\' or \'buffer\'.');
                        }
                        eps = options.executionProviders || [];
                        backendHints = eps.map(function (i) { return typeof i === 'string' ? i : i.name; });
                        return [4 /*yield*/, (0,_backend_impl__WEBPACK_IMPORTED_MODULE_0__.resolveBackend)(backendHints)];
                    case 1:
                        backend = _a.sent();
                        return [4 /*yield*/, backend.createSessionHandler(filePathOrUint8Array, options)];
                    case 2:
                        handler = _a.sent();
                        return [2 /*return*/, new InferenceSession(handler)];
                }
            });
        });
    };
    InferenceSession.prototype.startProfiling = function () {
        this.handler.startProfiling();
    };
    InferenceSession.prototype.endProfiling = function () {
        this.handler.endProfiling();
    };
    Object.defineProperty(InferenceSession.prototype, "inputNames", {
        get: function () {
            return this.handler.inputNames;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InferenceSession.prototype, "outputNames", {
        get: function () {
            return this.handler.outputNames;
        },
        enumerable: false,
        configurable: true
    });
    return InferenceSession;
}());



/***/ }),

/***/ "./lib/inference-session.ts":
/*!**********************************!*\
  !*** ./lib/inference-session.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InferenceSession": function() { return /* binding */ InferenceSession; }
/* harmony export */ });
/* harmony import */ var _inference_session_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./inference-session-impl */ "./lib/inference-session-impl.ts");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// eslint-disable-next-line @typescript-eslint/naming-convention
var InferenceSession = _inference_session_impl__WEBPACK_IMPORTED_MODULE_0__.InferenceSession;


/***/ }),

/***/ "./lib/onnx-value.ts":
/*!***************************!*\
  !*** ./lib/onnx-value.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.



/***/ }),

/***/ "./lib/tensor-impl.ts":
/*!****************************!*\
  !*** ./lib/tensor-impl.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Tensor": function() { return /* binding */ Tensor; }
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';
var isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';
// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.
var NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([
    ['float32', Float32Array],
    ['uint8', Uint8Array],
    ['int8', Int8Array],
    ['uint16', Uint16Array],
    ['int16', Int16Array],
    ['int32', Int32Array],
    ['bool', Uint8Array],
    ['float64', Float64Array],
    ['uint32', Uint32Array],
]);
// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.
var NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([
    [Float32Array, 'float32'],
    [Uint8Array, 'uint8'],
    [Int8Array, 'int8'],
    [Uint16Array, 'uint16'],
    [Int16Array, 'int16'],
    [Int32Array, 'int32'],
    [Float64Array, 'float64'],
    [Uint32Array, 'uint32'],
]);
if (isBigInt64ArrayAvailable) {
    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);
    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');
}
if (isBigUint64ArrayAvailable) {
    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);
    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');
}
/**
 * calculate size from dims.
 *
 * @param dims the dims array. May be an illegal input.
 */
var calculateSize = function (dims) {
    var size = 1;
    for (var i = 0; i < dims.length; i++) {
        var dim = dims[i];
        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {
            throw new TypeError("dims[" + i + "] must be an integer, got: " + dim);
        }
        if (dim < 0) {
            throw new RangeError("dims[" + i + "] must be a non-negative integer, got: " + dim);
        }
        size *= dim;
    }
    return size;
};
var Tensor = /** @class */ (function () {
    function Tensor(arg0, arg1, arg2) {
        var type;
        var data;
        var dims;
        // check whether arg0 is type or data
        if (typeof arg0 === 'string') {
            //
            // Override: constructor(type, data, ...)
            //
            type = arg0;
            dims = arg2;
            if (arg0 === 'string') {
                // string tensor
                if (!Array.isArray(arg1)) {
                    throw new TypeError('A string tensor\'s data must be a string array.');
                }
                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and
                // error will be populated at inference
                data = arg1;
            }
            else {
                // numeric tensor
                var typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);
                if (typedArrayConstructor === undefined) {
                    throw new TypeError("Unsupported tensor type: " + arg0 + ".");
                }
                if (Array.isArray(arg1)) {
                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces
                    // incorrect results.
                    // 'typedArrayConstructor' should be one of the typed array prototype objects.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    data = typedArrayConstructor.from(arg1);
                }
                else if (arg1 instanceof typedArrayConstructor) {
                    data = arg1;
                }
                else {
                    throw new TypeError("A " + type + " tensor's data must be type of " + typedArrayConstructor);
                }
            }
        }
        else {
            //
            // Override: constructor(data, ...)
            //
            dims = arg1;
            if (Array.isArray(arg0)) {
                // only boolean[] and string[] is supported
                if (arg0.length === 0) {
                    throw new TypeError('Tensor type cannot be inferred from an empty array.');
                }
                var firstElementType = typeof arg0[0];
                if (firstElementType === 'string') {
                    type = 'string';
                    data = arg0;
                }
                else if (firstElementType === 'boolean') {
                    type = 'bool';
                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is
                    // wrong type. We use 'as any' to make it happy.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    data = Uint8Array.from(arg0);
                }
                else {
                    throw new TypeError("Invalid element type of data array: " + firstElementType + ".");
                }
            }
            else {
                // get tensor type from TypedArray
                var mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);
                if (mappedType === undefined) {
                    throw new TypeError("Unsupported type for tensor data: " + arg0.constructor + ".");
                }
                type = mappedType;
                data = arg0;
            }
        }
        // type and data is processed, now processing dims
        if (dims === undefined) {
            // assume 1-D tensor if dims omitted
            dims = [data.length];
        }
        else if (!Array.isArray(dims)) {
            throw new TypeError('A tensor\'s dims must be a number array');
        }
        // perform check
        var size = calculateSize(dims);
        if (size !== data.length) {
            throw new Error("Tensor's size(" + size + ") does not match data length(" + data.length + ").");
        }
        this.dims = dims;
        this.type = type;
        this.data = data;
        this.size = size;
    }
    //#endregion
    //#region tensor utilities
    Tensor.prototype.reshape = function (dims) {
        return new Tensor(this.type, this.data, dims);
    };
    return Tensor;
}());



/***/ }),

/***/ "./lib/tensor.ts":
/*!***********************!*\
  !*** ./lib/tensor.ts ***!
  \***********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Tensor": function() { return /* binding */ Tensor; }
/* harmony export */ });
/* harmony import */ var _tensor_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tensor-impl */ "./lib/tensor-impl.ts");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// eslint-disable-next-line @typescript-eslint/naming-convention
var Tensor = _tensor_impl__WEBPACK_IMPORTED_MODULE_0__.Tensor;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
!function() {
/*!**********************!*\
  !*** ./lib/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "registerBackend": function() { return /* reexport safe */ _backend__WEBPACK_IMPORTED_MODULE_0__.registerBackend; },
/* harmony export */   "env": function() { return /* reexport safe */ _env__WEBPACK_IMPORTED_MODULE_1__.env; },
/* harmony export */   "InferenceSession": function() { return /* reexport safe */ _inference_session__WEBPACK_IMPORTED_MODULE_2__.InferenceSession; },
/* harmony export */   "Tensor": function() { return /* reexport safe */ _tensor__WEBPACK_IMPORTED_MODULE_3__.Tensor; }
/* harmony export */ });
/* harmony import */ var _backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backend */ "./lib/backend.ts");
/* harmony import */ var _env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./env */ "./lib/env.ts");
/* harmony import */ var _inference_session__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./inference-session */ "./lib/inference-session.ts");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tensor */ "./lib/tensor.ts");
/* harmony import */ var _onnx_value__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./onnx-value */ "./lib/onnx-value.ts");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.






}();
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,